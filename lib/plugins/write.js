// Generated by CoffeeScript 2.1.1
var fs, path;

path = require('path');

fs = require('fs-extra');

module.exports = function(punk) {
  var plugin, reporter;
  reporter = punk.reporter;
  plugin = {};
  plugin.pipes = {
    write: function(setting) {
      // PIPE #
      return punk.i.buffer(async function(files, cond) {
        var out, workdir;
        workdir = setting.workdir || cond.workdir || './';
        if ((files.length === 1) && (setting.outFile != null)) {
          if (setting.outFile[0] === punk.s.entry) {
            setting.outFile = setting.entry;
          }
          await punk.d.eachAsync(setting.outFile, async function(pth) {
            var out, rg, to;
            out = path.resolve(workdir, pth);
            to = punk.d.getExt(out);
            rg = punk.d.getType(files[0]);
            if (to !== rg) {
              files = (await punk.p.to(to)(files, cond));
            }
            await fs.remove(out);
            return (await fs.writeFile(out, files[0].contents));
          });
        } else if (files.length === 0) {

        } else if (setting.outDir || setting.outDirectory) {
          out = setting.outDir || setting.outDirectory;
          // if there are multiple files, write they to directory, which specified in setting.outDir
          await punk.d.eachAsync(out, async function(dir) {
            return (await punk.d.eachAsync(files, async function(file) {
              var realPath;
              // absolute path
              realPath = path.resolve(workdir, dir, file.path);
              await fs.remove(realPath);
              await fs.mkdirp(path.dirname(realPath));
              await fs.writeFile(realPath, file.contents);
            }));
          });
        }
        return files;
      });
    },
    outFile: function(setting) {
      if (!Array.isArray(setting)) {
        setting = [setting];
      }
      return async function(files, cond) {
        return (await plugin.pipes.write({
          outFile: setting
        })(files, cond));
      };
    },
    outDir: function(setting) {
      if (!Array.isArray(setting)) {
        setting = [setting];
      }
      return async function(files, cond) {
        return (await plugin.pipes.write({
          outDir: setting
        })(files, cond));
      };
    }
  };
  plugin.pipes.outDirectory = plugin.pipes.outDir;
  plugin.pipes.dest = plugin.pipes.write;
  return plugin;
};
