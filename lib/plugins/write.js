// Generated by CoffeeScript 2.0.2
var del, fs, mkdirp, path, pn;

path = require('path');

fs = require('fs');

del = require('del');

mkdirp = require('mkdirp');

pn = require('pn/fs');

module.exports = function(punk, reporter) {
  var plugin;
  plugin = {};
  plugin.pipes = {
    write: function(setting) {
      // PIPE #
      return async function(files, cond) {
        var contents, fn, keys, name, out, realPath, rg, to, workdir;
        keys = Object.keys(files);
        workdir = setting.workdir || cond.workdir || './';
        if ((keys.length === 1) && (setting.outFile != null)) {
          fn = keys[0];
          out = path.resolve(workdir, setting.outFile);
          to = punk.d.getExt(out);
          rg = punk.d.getType(keys[0], files[keys[0]]);
          if (to !== rg) {
            files = (await punk.p.to(to)(files, cond));
          }
          // if there is a single file, write its contents to path, which specified in setting.outFile
          pn.writeFile(out, files[Object.keys(files)[0]]);
        } else if (keys.length === 0) {

        } else if (setting.outDir || setting.outDirectory) {
          out = setting.outDir || setting.outDirectory;
          // if there are multiple files, write they to directory, which specified in setting.outDir
          for (name in files) {
            contents = files[name];
            // absolute path
            realPath = path.resolve(workdir, out, name);
            mkdirp.sync(path.dirname(realPath));
            pn.writeFile(realPath, contents);
          }
        }
        return files;
      };
    },
    outFile: function(setting) {
      return async function(files, cond) {
        return (await plugin.pipes.write({
          outFile: setting
        })(files, cond));
      };
    },
    outDir: function(setting) {
      return async function(files, cond) {
        return (await plugin.pipes.write({
          outDir: setting
        })(files, cond));
      };
    }
  };
  plugin.pipes.outDirectory = plugin.pipes.outDir;
  plugin.pipes.dest = plugin.pipes.write;
  return plugin;
};
