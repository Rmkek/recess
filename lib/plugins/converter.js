// Generated by CoffeeScript 2.0.2
var bufferize, chalk, getExt, isBuffer, isSvg, path, type;

type = require('file-type');

path = require('path');

chalk = require('chalk');

isSvg = require('is-svg');

isBuffer = require('is-buffer');

bufferize = function(files) {
  var file, name, results;
  results = [];
  for (name in files) {
    file = files[name];
    if (!isBuffer(file)) {
      results.push(files[name] = Buffer.from(file));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

getExt = function(name = '') {
  var ext;
  ext = path.extname(name).split('.');
  return ext[ext.length - 1];
};

module.exports = function(punk, reporter) {
  var plugin;
  plugin = {};
  plugin.pipes = {
    convert: function(settings) {
      if (typeof settings !== 'object') {
        settings = {
          format: settings
        };
      }
      return async function(files) {
        var e, ext, file, name, newName, p, pipe, regexp, s, tp;
        for (name in files) {
          file = files[name];
          // get type of file
          tp = type(file);
          if (!tp) {
            tp = {
              ext: getExt(name)
            };
          }
          ext = tp.ext;
          if (isSvg(file)) {
            ext = 'svg';
          }
          if (punk.converters[ext] && punk.converters[ext][settings.format]) {
            regexp = new RegExp(ext + '$', 'i');
            newName = name.replace(regexp, settings.format);
            pipe = punk.converters[ext][settings.format];
            try {
              // pipe file
              s = {};
              s[name] = file;
              p = pipe(s);
              if (p instanceof Promise) {
                p.catch(function(e) {
                  return reporter.error(e);
                });
                files[newName] = ((await p))[name];
              } else {
                files[newName] = p[name];
              }
              p = bufferize(p);
            } catch (error) {
              e = error;
              reporter.error(e);
            }
          } else {
            // remove file
            delete files[name];
            reporter.noType(name);
          }
        }
        return files;
      };
    }
  };
  plugin.to = plugin.convert;
  return plugin;
};
