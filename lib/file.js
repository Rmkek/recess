// Generated by CoffeeScript 2.1.1
var Mode;

Mode = require('stat-mode');

module.exports = function(punk) {
  var reporter;
  reporter = punk.reporter;
  punk.File = class {
    constructor(path, contents = new Buffer(''), stat = 0o777) {
      this.path = path;
      this.contents = contents;
      if (!Buffer.isBuffer(this.contents)) {
        this.contents = this.contents || '';
        this.contents = Buffer.from(this.contents);
      }
      stat = new Mode({
        mode: stat
      });
      Object.defineProperty(this, 'stat', {
        get: function() {
          return stat;
        },
        set: function(s) {
          return stat = new Mode({
            mode: stat
          });
        }
      });
    }

    toString() {
      return `<File ${this.path}: ${this.contents}`;
    }

  };
  return punk.Collection = (function() {
    var _Class, _pipe;

    _Class = class {
      constructor(files = [], settings = {}) {
        this.files = files;
        this.settings = settings;
      }

      pipe(pipe) {
        var p, sf;
        sf = this;
        p = new Promise(async function(resolve, reject) {
          if (typeof pipe === 'function') {
            sf.files = (await pipe(sf.files, sf.settings));
            sf.files = sf.files || [];
          }
          return resolve(sf.files);
        });
        p.pipe = function() {
          var args;
          args = arguments;
          return p.then(function() {
            return sf.pipe(...args);
          });
        };
        return p;
      }

    };

    _pipe = async function(p) {
      var r;
      r = (await p(this.files, this.settings));
      this.files = r;
      return this.files;
    };

    return _Class;

  }).call(this);
};
