// Generated by CoffeeScript 2.1.1
var Mode;

Mode = require('stat-mode');

module.exports = function(punk) {
  var reporter;
  reporter = punk.reporter;
  punk.File = class {
    constructor(path, contents = new Buffer(''), stat = 0o777) {
      this.path = path;
      this.contents = contents;
      if (!Buffer.isBuffer(this.contents)) {
        this.contents = this.contents || '';
        this.contents = Buffer.from(this.contents);
      }
      stat = new Mode({
        mode: stat
      });
      Object.defineProperty(this, 'stat', {
        get: function() {
          return stat;
        },
        set: function(s) {
          return stat = new Mode({
            mode: stat
          });
        }
      });
    }

    toString() {
      return `<File ${this.path}: ${this.contents}`;
    }

    setExt(newExt) {
      var ext, newName, regexp;
      if (newExt == null) {
        reporter.error('ext is undefined');
      }
      ext = punk.d.getType(this);
      regexp = new RegExp(ext + '$', 'i');
      newName = this.path.replace(regexp, newExt);
      return this.path = newName;
    }

  };
  // punk.Collection = class
  // 	constructor: (@files = [], @settings = {}) ->
  // 		@settings.workdir ?= punk.dirname

  // 	_pipe = (p) ->
  // 		r = await p @files, @settings
  // 		@files = r
  // 		await return @files

  // 	pipe: (pipe) ->
  // 		sf = @

  // 		p = new Promise (resolve, reject) ->
  // 			if typeof pipe is 'function'
  // 				sf.files = (await pipe sf.files, sf.settings)
  // 				sf.files = sf.files or []
  // 			resolve sf.files

  // 		p.pipe = -> 
  // 			args = arguments
  // 			p.then ->
  // 				sf.pipe args...

  // 		p

  // 	th: (pipe) ->
  // 		punk.d.await @pipe pipe
  return punk.collection = function(files = [], settings = {}) {
    var coll;
    if (settings.workdir == null) {
      settings.workdir = punk.dirname;
    }
    coll = function(pipe) {
      return punk.d.await(coll.pipe(pipe));
    };
    coll.files = files;
    coll.settings = settings;
    coll.th = coll.through = coll;
    coll._pipe = async function(p) {
      var r;
      r = (await p(coll.files, coll.settings));
      coll.files = r;
      return coll.files;
    };
    coll.pipe = function(pipe) {
      var p;
      p = new Promise(async function(resolve, reject) {
        if (typeof pipe === 'function') {
          coll.files = (await pipe(coll.files, coll.settings));
          coll.files = coll.files || [];
        }
        return resolve(coll.files);
      });
      p.pipe = function() {
        var args;
        args = arguments;
        return p.then(function() {
          return coll.pipe(...args);
        });
      };
      return p;
    };
    return coll;
  };
};
