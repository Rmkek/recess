// Generated by CoffeeScript 2.1.1
var Mode;

Mode = require('stat-mode');

module.exports = function(recess) {
  var reporter;
  reporter = recess.reporter;
  recess.File = class {
    constructor(path, contents = new Buffer(''), stat = 0o777) {
      this.path = path;
      this.contents = contents;
      if (!Buffer.isBuffer(this.contents)) {
        this.contents = this.contents || '';
        this.contents = Buffer.from(this.contents);
      }
      stat = new Mode({
        mode: stat
      });
      Object.defineProperty(this, 'stat', {
        get: function() {
          return stat;
        },
        set: function(s) {
          return stat = new Mode({
            mode: s
          });
        },
        enumerable: true
      });
      Object.defineProperty(this, 'mode', {
        get: function() {
          return stat;
        },
        set: function(s) {
          return stat = new Mode({
            mode: s
          });
        },
        enumerable: true
      });
    }

    toString() {
      return `<File ${this.path}: ${this.contents}>`;
    }

    setExt(newExt) {
      var ext, newName, regexp;
      if (newExt == null) {
        reporter.error('ext is undefined');
      }
      ext = recess.d.getType(this);
      regexp = new RegExp(ext + '$', 'i');
      newName = this.path.replace(regexp, newExt);
      return this.path = newName;
    }

  };
  // recess.Collection = class
  // 	constructor: (@files = [], @settings = {}) ->
  // 		@settings.workdir ?= recess.dirname

  // 	_pipe = (p) ->
  // 		r = await p @files, @settings
  // 		@files = r
  // 		await return @files

  // 	pipe: (pipe) ->
  // 		sf = @

  // 		p = new Promise (resolve, reject) ->
  // 			if typeof pipe is 'function'
  // 				sf.files = (await pipe sf.files, sf.settings)
  // 				sf.files = sf.files or []
  // 			resolve sf.files

  // 		p.pipe = -> 
  // 			args = arguments
  // 			p.then ->
  // 				sf.pipe args...

  // 		p

  // 	th: (pipe) ->
  // 		recess.d.await @pipe pipe
  return recess.collection = function(files = [], settings = {}) {
    var coll;
    if (settings.workdir == null) {
      settings.workdir = recess.dirname;
    }
    coll = function(pipe) {
      return recess.d.await(coll.pipe(pipe));
    };
    coll.files = files;
    coll.settings = settings;
    coll.th = coll.through = coll;
    coll.pipe = function(pipe) {
      var p;
      p = new Promise(async function(resolve, reject) {
        var e, r;
        if (typeof pipe === 'function') {
          try {
            r = (await pipe(coll.files, coll.settings));
            if (typeof r !== 'object') {
              reporter.error('Result of pipe must be an array! Got ' + typeof pipe + '.');
            }
            coll.files = (await r) || coll.files;
          } catch (error) {
            e = error;
            reporter.error(e);
          }
        } else {
          reporter.error('Pipe must be a function! Got ' + typeof pipe + '.');
        }
        return resolve(coll.files);
      });
      p.pipe = function() {
        var args;
        args = arguments;
        return p.then(function() {
          return coll.pipe(...args);
        });
      };
      return p;
    };
    return coll;
  };
};
