// Generated by CoffeeScript 2.0.2
module.exports = function(punk) {
  var getToRun, reporter, tasks;
  reporter = punk.reporter;
  punk._tasks = tasks = {};
  getToRun = function(ts) {
    var i, len, name, ret;
    ret = {};
    for (i = 0, len = ts.length; i < len; i++) {
      name = ts[i];
      if (tasks[name]) {
        ret[name] = tasks[name];
      } else {
        reporter.taskNotDefined(name);
      }
    }
    return ret;
  };
  punk.task = punk.tasks = function(task) {
    return Object.assign(tasks, task);
  };
  punk.run = async function(ts) {
    var e, funcs, toRun;
    funcs = [];
    ts.filter(function(f) {
      if (typeof f === 'function') {
        reporter.message('func');
        funcs.push(f);
        return false;
      } else {
        return true;
      }
    });
    reporter.message(funcs);
    if (!Array.isArray(ts)) {
      ts = [ts];
    }
    toRun = getToRun(ts);
    try {
      return (await punk.d.eachAsync(toRun, async function(setting, name) {
        return (await punk._runTask(name, setting));
      }));
    } catch (error) {
      e = error;
      return reporter.error(e);
    }
  };
  punk.watch = async function(ts) {
    var e, toRun;
    if (!Array.isArray(ts)) {
      ts = [ts];
    }
    toRun = getToRun(ts);
    try {
      return (await punk.d.eachAsync(toRun, async function(setting, name) {
        return (await punk._watchTask(name, setting));
      }));
    } catch (error) {
      e = error;
      return reporter.error(e);
    }
  };
  punk.startRun = async function() {
    reporter.start();
    reporter.usingConfig(punk.filename);
    punk.d.keepAlive();
    await punk.run(...arguments);
    return reporter.end();
  };
  punk.startWatch = async function() {
    reporter.startWatch();
    reporter.usingConfig(punk.filename);
    punk.d.keepAlive();
    return (await punk.run(...arguments));
  };
  return punk.seq = punk.sequence = function(tasks) {
    var r;
    r = async function() {
      var i, len, results, task;
      results = [];
      for (i = 0, len = tasks.length; i < len; i++) {
        task = tasks[i];
        results.push((await punk.run(task)));
      }
      return results;
    };
    r[punk.s.isSequence] = true;
    return r;
  };
};
