// Generated by CoffeeScript 2.0.2
var watch;

watch = require('glob-watcher');

module.exports = function(punk, reporter) {
  var r;
  return r = {
    _runTask: async function(taskName, task) {
      var devnull, files, pipe, ref;
      reporter.startingTask(taskName);
      // set settings to standard format
      task = punk.d.toSetting(task);
      files = new punk.Collection(void 0, task);
      // load files
      await files.pipe(punk.p.add(task.entry));
      ref = task.pipes;
      // pass files through pipes
      for (devnull in ref) {
        pipe = ref[devnull];
        await files.pipe(pipe);
      }
      // convert files
      if (task.to && !(task.outFile || task.outDir || task.outDirectory)) {
        await files.pipe(punk.p.to(task.to));
        task.outDir = './';
        await files.pipe(punk.p.write(task));
        reporter.message('ssdsdsds');
      } else if (task.to) {
        await files.pipe(punk.p.to(task.to));
      }
      // write files to FS
      await files.pipe(punk.p.write(task));
      // report
      reporter.finishedTask(taskName);
    },
    _watchTask: async function(taskName, task) {
      var ch, changed, watcher;
      // r._runTask taskName, task
      // set settings to standard format
      task = punk.d.toSetting(task);
      // load files
      changed = async function(rg) {
        var devnull, files, p, pipe, ref;
        files = new punk.Collection(void 0, task);
        if (rg) {
          await files.pipe(punk.p.add([rg]));
        } else {
          await files.pipe(punk.p.add(task.entry));
        }
        ref = task.pipes;
        // pass files through pipes
        for (devnull in ref) {
          pipe = ref[devnull];
          await files.pipe(pipe);
        }
        // convert files
        if (task.to) {
          await files.pipe(punk.p.to(task.to));
        }
        // write files to FS
        p = files.pipe(punk.p.write(task));
        reporter.message(p.pipe);
        if (rg) {
          // p.pipe punk.p.write(task)
          reporter.changed(rg);
        }
      };
      watcher = watch(task.entry);
      ch = function(path) {
        return setTimeout(function() {
          return changed(path);
        }, punk.config.changedDelay);
      };
      watcher.on('add', ch);
      watcher.on('change', ch);
    }
  };
};
