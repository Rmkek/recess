// Generated by CoffeeScript 2.0.2
var pn, watch;

watch = require('glob-watcher');

pn = require('pn/fs');

module.exports = function(punk, reporter) {
  var r;
  return r = {
    _runTask: async function(taskName, task) {
      var devnull, files, pipe, ref;
      reporter.startingTask(taskName);
      // set settings to standard format
      task = punk.d.toSetting(task);
      // load files
      files = (await punk.p.add(task.entry)([], task));
      ref = task.pipes;
      // pass files through pipes
      for (devnull in ref) {
        pipe = ref[devnull];
        files = (await pipe(files, task));
        punk.d.prepareFiles(files);
      }
      // convert files
      if (task.to) {
        files = (await punk.p.to(task.to)(files, task));
      }
      // write files to FS
      files = (await punk.p.write(task)(files, task));
      // report
      reporter.finishedTask(taskName);
    },
    _watchTask: async function(taskName, task) {
      var changed, watcher;
      // r._runTask taskName, task
      // set settings to standard format
      task = punk.d.toSetting(task);
      // load files
      changed = async function(rg) {
        var devnull, files, pipe, ref;
        if (rg) {
          files = (await punk.p.add([rg])([], task));
        } else {
          files = (await punk.p.add(task.entry)([], task));
        }
        ref = task.pipes;
        // pass files through pipes
        for (devnull in ref) {
          pipe = ref[devnull];
          files = (await pipe(files, task));
          punk.d.prepareFiles(files);
        }
        // convert files
        if (task.to) {
          files = (await punk.p.to(task.to)(files, task));
        }
        // write files to FS
        files = (await punk.p.write(task)(files, task));
        if (rg) {
          reporter.changed(rg);
        }
      };
      watcher = watch(task.entry);
      watcher.on('add', function(path) {
        return changed(path);
      });
      watcher.on('change', function(path) {
        return changed(path);
      });
    }
  };
};
