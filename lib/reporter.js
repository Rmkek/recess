// Generated by CoffeeScript 2.1.1
//##################
// CONNECT MODULES #
//##################
var chalk, ex, funcs, jst, reporter, schunk, size, update, updateMap, util, wrap;

chalk = require('chalk');

update = require('log-update');

wrap = require('word-wrap');

size = require('window-size');

schunk = function(str, len) {
  var i, len1, r, ref, results;
  ref = chunk(str, len);
  results = [];
  for (i = 0, len1 = ref.length; i < len1; i++) {
    r = ref[i];
    results.push(r.join(''));
  }
  return results;
};

util = require('util');

jst = function(text) {
  var w, width;
  ({width} = size.get());
  w = wrap(text, {
    width: width - 15 - 1,
    indent: ''
  });
  return w;
};

funcs = {};

ex = function(s, f) {
  var r;
  if (!reporter.map[s]) {
    reporter.map[s] = [];
  }
  if (!funcs[s]) {
    funcs[s] = [];
  }
  r = f();
  reporter.map[s].push(r);
  return funcs[s].push(f);
};

// ex = (s, f) ->
// 	reporter.map[s] = [] unless reporter.map[s]		
// 	reporter.map[s].push f()
updateMap = function() {
  var f, name, value;
  reporter.map = {};
  for (name in funcs) {
    value = funcs[name];
    reporter.map[name] = (function() {
      var i, len1, results;
      results = [];
      for (i = 0, len1 = value.length; i < len1; i++) {
        f = value[i];
        results.push(f());
      }
      return results;
    })();
  }
  return reporter.render();
};

process.stdout.on('resize', updateMap);

reporter = {
  map: {
    space: [],
    start: [],
    usingConfig: [],
    topSeparator: [],
    sections: [],
    bottomSeparator: [],
    built: [],
    exited: [],
    error: []
  },
  nmap: function() {
    return [reporter.map.space, reporter.map.start, reporter.map.usingConfig, reporter.map.topSeparator, reporter.map.sections, reporter.map.bottomSeparator, reporter.map.built, reporter.map.exited, reporter.map.error];
  },
  // throw util.format r
  start: function() {
    ex('start', () => {
      return "";
    });
    ex('start', () => {
      return ` ${chalk.bold(reporter.time())}   ${chalk.grey('»')} ${chalk.bold(jst('Starting build!'))}`;
    });
    return reporter.render();
  },
  startWatch: function() {
    ex('start', () => {
      return "";
    });
    ex('start', () => {
      return ` ${chalk.bold(reporter.time())}   ${chalk.grey('»')} ${chalk.bold(jst('Starting watch!'))}`;
    });
    return reporter.render();
  },
  time: function() {
    var dt, hours, hoursString, minutes, minutesString, seconds, secondsString;
    dt = new Date;
    hours = dt.getHours();
    hoursString = hours + "";
    if (hoursString.length === 1) {
      hoursString = "0" + hoursString;
    }
    minutes = dt.getMinutes();
    minutesString = minutes + "";
    if (minutesString.length === 1) {
      minutesString = "0" + minutesString;
    }
    seconds = dt.getSeconds();
    secondsString = seconds + "";
    if (secondsString.length === 1) {
      secondsString = "0" + secondsString;
    }
    return `${hoursString}:${minutesString}:${secondsString}`;
  },
  usingConfig: function(path) {
    ex('usingConfig', () => {
      var u;
      u = jst(`${chalk.bold('Using config at')} ${chalk.bold.blue(path)}!`);
      return ` ${chalk.bold(reporter.time())}   ${chalk.grey('»')} ${u}`;
    });
    return reporter.render();
  },
  message: function() {
    var time;
    time = reporter.time();
    return reporter.write(() => {
      var arr, num, prefix, sect, str, text;
      text = jst(util.format(...arguments));
      arr = text.split('\n');
      prefix = chalk.grey('│') + " " + chalk.bold(time) + " " + chalk.grey('│') + " " + chalk.grey("»") + " ";
      sect = chalk.grey('│') + '          ' + chalk.grey('│') + '   ';
      for (num in arr) {
        str = arr[num];
        if (num - 0 === 0) {
          arr[num] = prefix + chalk.bold(str);
        } else {
          arr[num] = sect + chalk.bold(str);
        }
      }
      return arr.join('\n');
    });
  },
  warn: function() {
    var time;
    time = reporter.time();
    return reporter.write(() => {
      var arr, num, prefix, sect, str, text;
      text = jst(util.format(...arguments));
      arr = text.split('\n');
      prefix = chalk.grey('│') + " " + chalk.bold.yellow(time) + " " + chalk.grey('│') + " " + chalk.yellow("»") + " ";
      sect = chalk.grey('│') + '          ' + chalk.grey('│') + '   ';
      for (num in arr) {
        str = arr[num];
        if (num - 0 === 0) {
          arr[num] = prefix + chalk.bold(str);
        } else {
          arr[num] = sect + chalk.bold(str);
        }
      }
      return arr.join('\n');
    });
  },
  error: function(err) {
    ex('error', () => {
      var arr, f, str;
      f = util.format(err);
      arr = f.split('\n');
      arr = arr.map(function(s) {
        return jst('     ' + s);
      });
      str = chalk.grey('└─ »') + ' ' + chalk.bold(arr.join('\n').slice(5));
      return str;
    });
    reporter.map.bottomSeparator = [chalk.grey('├──────────┘')];
    reporter.end(err);
    return reporter.render();
  },
  end: function(error = false) {
    var time;
    time = reporter.time();
    ex('built', () => {
      var separator, suffix, text, timer;
      if (error) {
        suffix = chalk.grey('│') + ' ';
        timer = chalk.bold.red(time) + ' ';
        separator = '  ' + chalk.bold.red('»') + ' ';
        text = jst(chalk.bold.red('Unsuccessfully built!'));
      } else {
        suffix = ' ';
        timer = chalk.bold(time) + ' ';
        separator = '  ' + chalk.bold.grey('»') + ' ';
        text = jst(chalk.bold.green('Successfully built!'));
      }
      return suffix + timer + separator + text;
    });
    reporter.render();
    return process.exit();
  },
  // BASIC MESSAGES #
  task: function(task) {
    return chalk.blue('#' + task);
  },
  file: function(file) {
    return chalk.blue(file);
  },
  startingTask: function(name) {
    return reporter.message('Starting task ' + reporter.task(name) + '!');
  },
  finishedTask: function(name) {
    return reporter.message('Finished task ' + reporter.task(name) + '!');
  },
  changed: function(name) {
    return reporter.message('Updated file ' + reporter.file(name) + '!');
  },
  finishedAll: function() {
    return reporter.message('Finished all tasks!');
  },
  noType: function(filename) {
    return reporter.warn('Cannot identify type of file ' + reporter.file(filename) + '!');
  },
  noMin: function(filename) {
    return reporter.warn('Cannot minify file ' + reporter.file(filename) + '!');
  },
  noFiles: function(glob) {
    return reporter.warn('Not found any files at entry ' + reporter.file(glob) + '!');
  },
  noConverter: function(from, to) {
    return reporter.warn('Not found converter for convert file ' + chalk.blue(from) + ' to ' + chalk.blue(to) + ' format!');
  },
  pluginsConflict: function(pluginName) {
    var pl;
    pl = chalk.blue(pluginName);
    return reporter.warn('Plugin "' + pl + '" conflicts with existing plugin "' + pl + '"! Falling back to first plugin.');
  },
  pluginNotFound: function(plugin) {
    if (plugin) {
      return reporter.error(new Error('Not found plugin ' + plugin + '!'));
    } else {
      return reporter.error(new Error('Not found plugin!'));
    }
  },
  tasksNotFound: function(tasks) {
    return reporter.warn(`Task(s) ${reporter.task(tasks)} not found!`);
  },
  write: function(text) {
    ex('sections', text);
    return reporter.render();
  },
  render: function() {
    var array, devnull, i, len1, m, map, p, s, str;
    map = reporter.nmap();
    map = (function() {
      var i, len1, results;
      results = [];
      for (i = 0, len1 = map.length; i < len1; i++) {
        m = map[i];
        if (m) {
          results.push(m);
        } else {
          results.push([]);
        }
      }
      return results;
    })();
    array = [];
    for (devnull in map) {
      s = map[devnull];
      for (i = 0, len1 = s.length; i < len1; i++) {
        p = s[i];
        array = array.concat(p);
      }
    }
    str = array.join('\n');
    return update(str);
  }
};

ex('topSeparator', () => {
  return chalk.grey('┌──────────┐');
});

ex('bottomSeparator', () => {
  return chalk.grey('└──────────┘');
});

module.exports = function(punk) {
  return punk.reporter = reporter;
};
