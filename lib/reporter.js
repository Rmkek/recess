// Generated by CoffeeScript 2.0.2
//##################
// CONNECT MODULES #
//##################
var chalk, jst, reporter, schunk, size, update, util, wrap;

chalk = require('chalk');

update = require('log-update');

wrap = require('word-wrap');

size = require('window-size');

schunk = function(str, len) {
  var i, len1, r, ref, results;
  ref = chunk(str, len);
  results = [];
  for (i = 0, len1 = ref.length; i < len1; i++) {
    r = ref[i];
    results.push(r.join(''));
  }
  return results;
};

util = require('util');

jst = function(text) {
  var width;
  ({width} = size.get());
  return wrap(text, {
    width: width - 15 - 1,
    indent: ''
  });
};

module.exports = {
  map: {
    space: [],
    start: [],
    usingConfig: [],
    topSeparator: [chalk.grey('┌──────────┐')],
    sections: [],
    bottomSeparator: [chalk.grey('└──────────┘')],
    built: [],
    error: []
  },
  nmap: function() {
    return [reporter.map.space, reporter.map.start, reporter.map.usingConfig, reporter.map.topSeparator, reporter.map.sections, reporter.map.bottomSeparator, reporter.map.built, reporter.map.error];
  },
  start: function() {
    reporter.map.start.push(() => {
      return "";
    });
    reporter.map.start.push(() => {
      return ` ${chalk.bold(reporter.time())}   ${chalk.grey('»')} ${chalk.bold('Starting build!')}`;
    });
    return reporter.render();
  },
  time: function() {
    var dt, hours, hoursString, minutes, minutesString, seconds, secondsString;
    dt = new Date;
    hours = dt.getHours();
    hoursString = hours + "";
    if (hoursString.length === 1) {
      hoursString = "0" + hoursString;
    }
    minutes = dt.getMinutes();
    minutesString = minutes + "";
    if (minutesString.length === 1) {
      minutesString = "0" + minutesString;
    }
    seconds = dt.getSeconds();
    secondsString = seconds + "";
    if (secondsString.length === 1) {
      secondsString = "0" + secondsString;
    }
    return `${hoursString}:${minutesString}:${secondsString}`;
  },
  usingConfig: function(path) {
    reporter.map.usingConfig.push(() => {
      return ` ${chalk.bold(reporter.time())}   ${chalk.grey('»')} ${chalk.bold('Using config at')} ${chalk.bold.blue(path)}!`;
    });
    return reporter.render();
  },
  message: function() {
    var time;
    time = reporter.time();
    return reporter.write(() => {
      var arr, num, prefix, sect, str, text;
      text = jst(util.format(...arguments));
      arr = text.split('\n');
      prefix = chalk.grey('│') + " " + chalk.bold(time) + " " + chalk.grey('│') + " " + chalk.grey("»") + " ";
      sect = chalk.grey('│') + '          ' + chalk.grey('│') + '   ';
      for (num in arr) {
        str = arr[num];
        if (num - 0 === 0) {
          arr[num] = prefix + chalk.bold(str);
        } else {
          arr[num] = sect + chalk.bold(str);
        }
      }
      return arr.join('\n');
    });
  },
  warn: function() {
    var time;
    time = reporter.time();
    return reporter.write(() => {
      var arr, num, prefix, sect, str, text;
      text = jst(util.format(...arguments));
      arr = text.split('\n');
      prefix = chalk.grey('│') + " " + chalk.bold.yellow(time) + " " + chalk.grey('│') + " " + chalk.yellow("»") + " ";
      sect = chalk.grey('│') + '          ' + chalk.grey('│') + '   ';
      for (num in arr) {
        str = arr[num];
        if (num - 0 === 0) {
          arr[num] = prefix + chalk.bold(str);
        } else {
          arr[num] = sect + chalk.bold(str);
        }
      }
      return arr.join('\n');
    });
  },
  error: function(err) {
    reporter.map.error.push(() => {
      var arr, f, str;
      f = util.format(err);
      arr = f.split('\n');
      arr = arr.map(function(s) {
        return '     ' + s;
      });
      str = chalk.grey('└─ »') + ' ' + chalk.bold(arr.join('\n').slice(5));
      return str;
    });
    reporter.map.bottomSeparator = [
      function() {
        return chalk.grey('├──────────┘');
      }
    ];
    reporter.end(err);
    return reporter.render();
  },
  end: function(error = false) {
    var time;
    time = reporter.time();
    reporter.map.built.push(() => {
      var separator, suffix, text, timer;
      if (error) {
        suffix = chalk.grey('│') + ' ';
        timer = chalk.bold.red(time) + ' ';
        separator = '  ' + chalk.bold.red('»') + ' ';
        text = chalk.bold.red('Unsuccessfully built!');
      } else {
        suffix = ' ';
        timer = chalk.bold(time) + ' ';
        separator = '  ' + chalk.bold.grey('»') + ' ';
        text = chalk.bold.green('Successfully built!');
      }
      return suffix + timer + separator + text;
    });
    reporter.render();
    return process.exit();
  },
  // BASIC MESSAGES #
  startingTask: function(name) {
    return reporter.message('Starting task ' + chalk.blue('#' + name) + '!');
  },
  finishedTask: function(name) {
    return reporter.message('Finished task ' + chalk.blue('#' + name) + '!');
  },
  finishedAll: function() {
    return reporter.message('Finished all tasks!');
  },
  noType: function(filename) {
    return reporter.warn('Cannot identify type of file ' + chalk.blue(filename) + '!');
  },
  noMin: function(filename) {
    return reporter.warn('Cannot minify file ' + chalk.blue(filename) + '!');
  },
  write: function(text) {
    reporter.map.sections.push(text);
    return reporter.render();
  },
  render: function() {
    var array, i, j, len1, len2, map, p, s, str;
    map = reporter.nmap();
    array = [];
    for (i = 0, len1 = map.length; i < len1; i++) {
      s = map[i];
      for (j = 0, len2 = s.length; j < len2; j++) {
        p = s[j];
        if (typeof p === 'function') {
          p = p();
        }
        array = array.concat(p);
      }
    }
    str = array.join('\n');
    return update(str);
  }
};

reporter = module.exports;
