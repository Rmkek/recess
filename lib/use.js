// Generated by CoffeeScript 2.1.1
var resolve;

resolve = require('resolve');

module.exports = function(punk) {
  var reporter;
  reporter = punk.reporter;
  punk._use = function(plugin) {
    var name, pth, ref, ref1, value;
    if (plugin === void 0) {
      return;
    }
    if (!plugin) {
      reporter.pluginNotFound();
    }
    // get plugin from string
    if ((ref = typeof plugin) === 'string' || ref === 'number') {
      try {
        pth = resolve.sync(plugin, {
          basedir: punk.dirname
        });
      } catch (error) {}
      if (pth == null) {
        reporter.pluginNotFound(plugin);
      }
      plugin = require(pth);
    }
    if (typeof plugin === 'function') {
      plugin = plugin(punk, reporter);
    }
    // merge
    if (plugin.pipes) {
      ref1 = plugin.pipes;
      for (name in ref1) {
        value = ref1[name];
        if (punk.p[name]) {
          reporter.pluginsConflict(name);
        } else {
          if (Array.isArray(value)) {
            value.textInput = true;
            punk.p[name] = value[0];
          } else {
            punk.p[name] = value;
          }
        }
      }
    }
    if (plugin.converters) {
      Object.assign(punk.converters, plugin.converters);
    }
    if (plugin.minifiers) {
      return Object.assign(punk.minifiers, plugin.minifiers);
    }
  };
  return punk.use = function() {
    var name, plugin, plugins, results;
    if (arguments.length > 1) {
      plugins = arguments;
    } else if (Array.isArray(arguments[0])) {
      plugins = arguments[0];
    } else {
      plugins = [arguments[0]];
    }
    results = [];
    for (name in plugins) {
      plugin = plugins[name];
      results.push(punk._use(plugin));
    }
    return results;
  };
};
