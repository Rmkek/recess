// Generated by CoffeeScript 2.0.2
(async function() {
  var code, dsl, e, fs, init, path, pj, pjPath, pjText, program, pth, punk, run, ts, up;
  path = require('path');
  fs = require('fs-extra');
  program = require('commander');
  up = require('find-up');
  pjPath = path.resolve(__dirname, '../../package.json');
  pjText = ((await fs.readFile(pjPath))).toString();
  pj = JSON.parse(pjText);
  program.version(pj.version).usage('[options] <task ...>').option('-w, --watch', 'Look after files').parse(process.argv);
  run = require('./run.js');
  init = require('../../index.js');
  pth = (await up(['Punkfile.js', 'punkfile.js', 'Punkfile', 'punkfile']));
  punk = init(pth);
  // bridge
  dsl = {
    punk: punk,
    use: function() {
      return punk.use(...arguments);
    },
    task: function() {
      return punk.task(...arguments);
    },
    tasks: function() {
      return punk.task(...arguments);
    },
    run: function() {
      return punk.run(...arguments);
    },
    watch: function() {
      return punk.watch(...arguments);
    },
    ignore: function() {
      return punk.ignore(...arguments);
    },
    ignores: function() {
      return punk.ignore(...arguments);
    },
    plugins: punk.plugins,
    p: punk.p,
    to: punk.p.to,
    min: {
      min: true
    },
    minify: {
      min: true
    },
    entry: punk.s.entry,
    def: punk.s.default,
    defs: punk.s.default,
    default: punk.s.default,
    defaults: punk.s.default
  };
  code = (await fs.readFile(pth));
  try {
    run(code, dsl);
  } catch (error) {
    e = error;
    punk.r.error(e);
  }
  ts = program.args;
  if ((ts.length === 0) && (!program.watch) && (punk._tasks.default != null)) {
    ts = ['default'];
  }
  if ((ts.length === 0) && program.watch && (punk._tasks.default != null)) {
    ts = ['default'];
  }
  if ((ts.length === 0) && program.watch && (punk._tasks.watch != null)) {
    ts = ['watch'];
  }
  if (!program.watch) {
    return punk.startRun(ts);
  } else {
    return punk.startWatch(ts);
  }
})();
