// Generated by CoffeeScript 2.1.1
module.exports = async function(argv) {
  var code, dsl, e, fs, init, path, pj, pjPath, pjText, program, pth, punk, run, ts, up;
  path = require('path');
  fs = require('fs-extra');
  program = require('commander');
  up = require('find-up');
  pjPath = path.resolve(__dirname, '../../package.json');
  pjText = ((await fs.readFile(pjPath))).toString();
  pj = JSON.parse(pjText);
  program.version(pj.version).usage('[options] <task ...>').option('-w, --watch', 'Look after files').option('-p, --production', 'Production mode').parse(argv);
  run = require('./run.js');
  init = require('../../index.js');
  pth = (await up(['Punkfile.js', 'punkfile.js', 'Punkfile', 'punkfile'], {
    cwd: __dirname
  }));
  punk = init(pth);
  punk.production = !!program.production;
  // bridge
  dsl = {
    punk: punk,
    use: punk.use,
    uses: punk.use,
    task: punk.task,
    tasks: punk.task,
    spawn: punk.run,
    run: function() {
      return punk.d.await(punk.run(...arguments));
    },
    watch: punk.watch,
    watches: punk.watch,
    ignore: punk.ignore,
    ignores: punk.ignore,
    seq: punk.seq,
    sequence: punk.seq,
    event: punk.e,
    e: punk.e,
    reporter: punk.reporter,
    r: punk.reporter,
    message: punk.reporter.message,
    log: punk.reporter.message,
    err: punk.reporter.err,
    error: punk.reporter.err,
    end: punk.reporter.end,
    warn: punk.reporter.warn,
    console: {
      message: punk.reporter.message,
      log: punk.reporter.message,
      info: punk.reporter.message,
      warn: punk.reporter.warn,
      err: punk.reporter.err,
      error: punk.reporter.err,
      info: punk.reporter.dir,
      end: punk.reporter.end
    },
    production: punk.production,
    prod: punk.production,
    p: punk.production,
    outFile: punk.p.outFile,
    outDir: punk.p.outDir,
    plugins: punk.plugins,
    p: punk.p,
    to: punk.p.to,
    min: punk.p.min(),
    minify: punk.p.min(),
    cluster: punk.p.if(),
    pif: punk.p.if(),
    add: punk.p.add,
    entry: punk.s.entry,
    entries: punk.s.entry,
    input: punk.s.entry,
    inputs: punk.s.entry,
    
    def: punk.s.default,
    defs: punk.s.default,
    default: punk.s.default,
    defaults: punk.s.default
  };
  code = ((await fs.readFile(pth))).toString();
  try {
    run(code, dsl);
  } catch (error) {
    e = error;
    punk.r.error(e);
  }
  ts = program.args;
  if ((ts.length === 0) && (!program.watch) && (punk._tasks.default != null)) {
    ts = ['default'];
  }
  if ((ts.length === 0) && program.watch && (punk._tasks.default != null)) {
    ts = ['default'];
  }
  if ((ts.length === 0) && program.watch && (punk._tasks.watch != null)) {
    ts = ['watch'];
  }
  if (program.watch) {
    return punk.startWatch(ts);
  } else {
    return punk.startRun(ts);
  }
};
