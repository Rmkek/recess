// Generated by CoffeeScript 2.1.1
var cluster, d, gaze, up;

cluster = require('cluster');

up = require('find-up');

gaze = require('gaze');

d = async function(argv) {
  var chalk, cwd, fs, init, notFound, onMessage, path, pj, pjPath, pjText, program, pth, run, start, time, upd, worker;
  path = require('path');
  fs = require('fs-extra');
  program = require('commander');
  // FIND PACKAGE.JSON
  pjPath = path.resolve(__dirname, '../../package.json');
  pjText = ((await fs.readFile(pjPath))).toString();
  pj = JSON.parse(pjText);
  program.version(pj.version).usage('[options] <task ...>').option('-w, --watch', 'Look after files').option('-c, --config <path>', 'Set config').option('-p, --production', 'Production mode').parse(argv);
  // FIND CONFIG
  cwd = process.cwd();
  if (program.config) {
    pth = program.config;
  } else {
    pth = (await up(['Recess.js', 'recess.js', 'recess', 'Recess'], {cwd}));
  }
  // GET DATE
  time = function() {
    var dt, hours, hoursString, minutes, minutesString, seconds, secondsString;
    dt = new Date;
    hours = dt.getHours();
    hoursString = hours + "";
    if (hoursString.length === 1) {
      hoursString = "0" + hoursString;
    }
    minutes = dt.getMinutes();
    minutesString = minutes + "";
    if (minutesString.length === 1) {
      minutesString = "0" + minutesString;
    }
    seconds = dt.getSeconds();
    secondsString = seconds + "";
    if (secondsString.length === 1) {
      secondsString = "0" + secondsString;
    }
    return `${hoursString}:${minutesString}:${secondsString}`;
  };
  upd = function() {
    var worker;
    console.log();
    console.log(`  ${chalk.bold(time())}   ${chalk.grey('»')} ${chalk.bold('Config was changed!')}`);
    worker.destroy();
    worker = cluster.fork();
    return worker.on('message', onMessage);
  };
  // CONFIG NOT FOUND MESSAGE
  notFound = function() {
    return console.log(`  ${chalk.bold.red(time())}   ${chalk.red('»')} ${chalk.bold('Config not found!')}`);
  };
  if (!pth) {
    notFound();
  }
  // START MASTER
  if (cluster.isMaster) {
    chalk = require('chalk');
    worker = cluster.fork();
    onMessage = function(msg) {
      if (msg === 'BUILD FINISHED') {
        return process.exit();
      }
    };
    worker.on('message', onMessage);
    console.log();
    console.log(`  ${chalk.bold(time())}   ${chalk.grey('»')} ${chalk.bold('Starting builder...')}`);
    // WATCH CONFIG
    return gaze(pth, function(err) {
      if (err) {
        console.error(err);
      }
      this.on('delete', function() {
        return console.log(`  ${chalk.bold.red(time())}   ${chalk.red('»')} ${chalk.bold('Config was deleted!')}`);
      });
      return this.on('changed', function(path) {
        return upd();
      });
    });
  } else {
    // START CHILD PROCESS FOR KILL IT AFTER :X
    run = require('./run.js');
    init = require('../../index.js');
    start = async() => {
      var code, dsl, e, recess, ts;
      recess = init(pth, cwd);
      recess.production = !!program.production;
      // bridge
      dsl = {
        recess: recess,
        use: recess.use,
        uses: recess.use,
        task: recess.task,
        tasks: recess.task,
        spawn: recess.run,
        run: function() {
          return recess.d.await(recess.run(...arguments));
        },
        watch: recess.watch,
        watches: recess.watch,
        ignore: recess.ignore,
        ignores: recess.ignore,
        seq: recess.seq,
        sequence: recess.seq,
        event: recess.e,
        e: recess.e,
        read: fs.readFileSync,
        reporter: recess.reporter,
        r: recess.reporter,
        message: recess.reporter.message,
        log: recess.reporter.message,
        err: recess.reporter.fatal,
        error: recess.reporter.fatal,
        end: recess.reporter.end,
        warn: recess.reporter.warn,
        console: {
          message: recess.reporter.message,
          log: recess.reporter.message,
          info: recess.reporter.message,
          warn: recess.reporter.warn,
          err: recess.reporter.fatal,
          error: recess.reporter.fatal,
          info: recess.reporter.dir,
          end: recess.reporter.end
        },
        production: recess.production,
        prod: recess.production,
        p: recess.production,
        outFile: recess.p.outFile,
        outDir: recess.p.outDir,
        plugins: recess.plugins,
        p: recess.p,
        to: recess.p.to,
        bundle: recess.p.bundle,
        wrap: recess.p.wrap,
        unwrap: recess.p.unwrap,
        del: recess.p.del,
        remove: recess.p.remove,
        min: recess.p.min(),
        minify: recess.p.min(),
        cluster: recess.p.if(),
        pif: recess.p.if(),
        stat: recess.p.stat,
        add: recess.p.add,
        entry: recess.s.entry,
        entries: recess.s.entry,
        input: recess.s.entry,
        inputs: recess.s.entry,
        
        def: recess.s.default,
        defs: recess.s.default,
        default: recess.s.default,
        defaults: recess.s.default
      };
      code = ((await fs.readFile(pth))).toString();
      try {
        run(code, dsl);
      } catch (error) {
        e = error;
        recess.r.error(e);
      }
      ts = program.args;
      if ((ts.length === 0) && (!program.watch) && (recess._tasks.default != null)) {
        ts = ['default'];
      }
      if ((ts.length === 0) && program.watch && (recess._tasks.default != null)) {
        ts = ['default'];
      }
      if ((ts.length === 0) && program.watch && (recess._tasks.watch != null)) {
        ts = ['watch'];
      }
      if (program.watch) {
        return (await recess.startWatch(ts));
      } else {
        return (await recess.startRun(ts));
      }
    };
    return (await start());
  }
};

module.exports = d;
