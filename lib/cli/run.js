// Generated by CoffeeScript 2.1.1
var func, run,
  hasProp = {}.hasOwnProperty;

[run, func] = (function() {
  var BrowserError, Module, be, core, fs, isNative, path, process, ref, toSetting, vm, wrap;
  BrowserError = class BrowserError extends Error {
    constructor() {
      super();
      this.name = 'BrowserError';
      this.message = 'This module works only in Node.JS. Try to use "vm-browserify".';
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, BrowserError);
      } else {
        this.stack = new Error().stack;
      }
    }

  };
  be = function() {
    throw new BrowserError();
  };
  try {
    process = require('process');
  } catch (error) {
    be();
  }
  if ((process != null ? (ref = process.versions) != null ? ref.node : void 0 : void 0) == null) {
    be();
  }
  vm = require('vm');
  path = require('path');
  Module = require('module');
  fs = require('fs');
  toSetting = function(settings) {
    var code, dsl, filename;
    code = settings.code || settings.source || settings.function || settings.func || settings.f || settings.do;
    dsl = settings.dsl || settings.context || settings.object || settings;
    filename = settings.filename || settings.file;
    return [code, dsl, filename];
  };
  isNative = (function() {
    var fnToString, reHostCtor, reNative, toString;
    toString = Object.prototype.toString;
    fnToString = Function.prototype.toString;
    reHostCtor = /^\[object .+?Constructor\]$/;
    reNative = RegExp('^' + (String(toString).replace(/[.*+?^${}()|[\]\/\\]/g, '\\$&').replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'));
    return function(value) {
      var type;
      type = typeof value;
      if (type === 'function') {
        return reNative.test(fnToString.call(value));
      } else {
        return (value && type === 'object' && reHostCtor.test(toString.call(value))) || false;
      }
    };
  })();
  
  // skeleton stealed from CoffeeScript x)
  core = function(code = '', dsl = {}, filename = 'eval') {
    var index, k, ref1, sandbox, v, value;
    if (typeof code === 'function') {
      return wrap(code, dsl)();
    }
    if ((ref1 = typeof code) !== 'string' && ref1 !== 'number') {
      throw new TypeError('Not a string or number!');
    }
    code = code + "";
    // new context
    if (vm.isContext(dsl)) {
      sandbox = dsl;
    } else {
      sandbox = vm.createContext();
      for (k in dsl) {
        if (!hasProp.call(dsl, k)) continue;
        v = dsl[k];
        sandbox[k] = v;
      }
    }
    sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
    // paths
    sandbox.__filename = filename;
    sandbox.__dirname = path.dirname(sandbox.__filename);
    if (sandbox !== global || sandbox.module || sandbox.require) {
      // commonjs module
      sandbox.module = new Module(sandbox.__filename);
      sandbox.require = function(path) {
        return Module._load(path, sandbox.module, true);
      };
      sandbox.module.filename = sandbox.__filename;
      for (index in require) {
        if (!hasProp.call(require, index)) continue;
        value = require[index];
        if (index !== 'paths' && index !== 'arguments' && index !== 'caller') {
          sandbox.require[index] = value;
        }
      }
      sandbox.require.paths = sandbox.module.paths = Module._nodeModulePaths((process != null ? typeof process.cwd === "function" ? process.cwd() : void 0 : void 0) || './');
      sandbox.require.resolve = function(request) {
        return Module._resolveFilename(request, _module);
      };
      // some globals
      if (sandbox.process == null) {
        sandbox.process = process;
      }
      if (sandbox.exports == null) {
        sandbox.exports = sandbox.module.exports;
      }
      if (sandbox.Buffer == null) {
        sandbox.Buffer = Buffer;
      }
      if (sandbox.console == null) {
        sandbox.console = console;
      }
      if (sandbox.setTimeout == null) {
        sandbox.setTimeout = setTimeout;
      }
      if (sandbox.setInterval == null) {
        sandbox.setInterval = setInterval;
      }
      if (sandbox.setImmediate == null) {
        sandbox.setImmediate = setImmediate;
      }
      if (sandbox.clearImmediate == null) {
        sandbox.clearImmediate = clearImmediate;
      }
      if (sandbox.clearInterval == null) {
        sandbox.clearInterval = clearInterval;
      }
      if (sandbox.clearTimeout == null) {
        sandbox.clearTimeout = clearTimeout;
      }
    }
    // run
    return vm.runInContext(code, sandbox);
  };
  run = function(settings) {
    var code, dsl, filename, ref1;
    if ((arguments.length > 1) || ((ref1 = typeof settings) === 'function' || ref1 === 'string')) {
      return core(...arguments);
    } else {
      [code, dsl, filename] = toSetting(settings);
      // try to read file
      if (!code && filename) {
        code = fs.readFileSync(filename);
        if (!code) {
          throw new Error('Not found file "' + filename + '"!');
        }
      }
      return core(code, dsl, filename);
    }
  };
  wrap = function(settings) {
    var _args, arg, args, code, dsl, f, filename, ref1;
    _args = arguments;
    args = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = _args.length; i < len; i++) {
        arg = _args[i];
        results.push(arg);
      }
      return results;
    })();
    if ((args.length > 1) || ((ref1 = typeof settings) === 'function' || ref1 === 'string')) {
      f = args[0] || function() {};
      if (typeof f !== 'function') {
        throw new TypeError('Not a function!');
      }
      if (isNative(f)) {
        throw new TypeError('Function must be not native!');
      }
      code = "(" + f.toString() + ")";
      return run(code, ...args.slice(1));
    } else {
      [f, dsl, filename] = toSetting(settings);
      code = "(" + f.toString() + ")";
      return run(code, dsl, filename);
    }
  };
  return [run, wrap];
})();

module.exports = run;
