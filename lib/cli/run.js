// Generated by CoffeeScript 2.0.2
var Module, path, process, vm,
  hasProp = {}.hasOwnProperty;

process = require('process');

vm = require('vm');

path = require('path');

Module = require('module');

module.exports = function(code = '', dsl = {}, filename = 'eval') {
  var _module, _require, createContext, index, k, ref, sandbox, v, value;
  createContext = (ref = vm.Script.createContext) != null ? ref : vm.createContext;
  // new context
  if (vm.isContext(dsl)) {
    sandbox = dsl;
  } else {
    sandbox = createContext();
    for (k in dsl) {
      if (!hasProp.call(dsl, k)) continue;
      v = dsl[k];
      sandbox[k] = v;
    }
  }
  sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
  // paths
  sandbox.__filename = filename;
  sandbox.__dirname = path.dirname(sandbox.__filename);
  if (sandbox !== global || sandbox.module || sandbox.require) {
    // WTF
    sandbox.module = _module = new Module(sandbox.__filename);
    sandbox.require = _require = function(path) {
      return Module._load(path, _module, true);
    };
    _module.filename = sandbox.__filename;
    for (index in require) {
      if (!hasProp.call(require, index)) continue;
      value = require[index];
      if (index !== 'paths' && index !== 'arguments' && index !== 'caller') {
        _require[index] = value;
      }
    }
    _require.paths = _module.paths = Module._nodeModulePaths(process.cwd());
    _require.resolve = function(request) {
      return Module._resolveFilename(request, _module);
    };
    // some globals
    sandbox.process = process;
    sandbox.exports = sandbox.module.exports;
    sandbox.Buffer = Buffer;
    sandbox.console = console;
    sandbox.setTimeout = setTimeout;
    sandbox.setInterval = setInterval;
    sandbox.setImmediate = setImmediate;
    sandbox.clearImmediate = clearImmediate;
    sandbox.clearInterval = clearInterval;
    sandbox.clearTimeout = clearTimeout;
  }
  if (sandbox === global) {
    return vm.runInThisContext(code);
  } else {
    return vm.runInContext(code, sandbox);
  }
};
